// Source : https://oj.leetcode.com/problems/
// Author : Tony
// Date   : 18-08-2015

/********************************************************************************** 
* 
* Given an array S of n integers, find three integers in S such that the sum is 
* closest to a given number, target. Return the sum of the three integers. 
* You may assume that each input would have exactly one solution.
* 
*     For example, given array S = {-1 2 1 -4}, and target = 1.
* 
*     The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
* 
*               
**********************************************************************************/

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
		int n = nums.size();
        if(n < 3) {
			cout << "error input" << endl;
			return 0;
		}
		else if(n == 3) {
			return nums[0]+nums[1]+nums[2];
		}
		else{
			sort(nums.begin(),nums.end());
			for(int i=0; i<n-2; i++){
				while(i>0 && nums[i] == nums[i-1]) continue;
				int NewTarget
			}
		}
    }
};

int main(){
	//int a[] = {-1, 0, -2, -3, 1, 0, 3, -5, 8, 2, 10, 0};
	int a[] = {-1, 0, 1, 2, -1, 1, -4};
	//int a[] = {-1, 1, 1, 1, -1, -1, 0,0,0};
	
	Solution s;
    
	
	return 0;
}

